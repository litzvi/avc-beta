#server.port=5000
#spring.datasource.url=jdbc:mysql://${RDS_HOSTNAME}:${RDS_PORT}/${RDS_DB_NAME}
#spring.datasource.username=${RDS_USERNAME}
#spring.datasource.password=${RDS_PASSWORD}

 # datasource
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/ebdb-test?useSSL=false
spring.datasource.username=root
spring.datasource.password=309864890

 # generate only power of 2 'in' clauses
spring.jpa.properties.hibernate.query.in_clause_parameter_padding = true

 # DDL generation
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL8Dialect

#spring.cloud.gcp.sql.database-name=avcdbjpa
#spring.cloud.gcp.sql.instance-connection-name=animated-rhythm-274402:asia-southeast1:avc-beta

 # persistence session from view(rest controller)
 # spring should not open a persistence context session from the controller method.
 	# e.g. calling add and get for a city (by id) in the same view, city won't have the country.
 	# calling other services not from the database will still keep the connection open.
 	# Changes can be made to the object outside of the @Transacional method.
spring.jpa.open-in-view=false

# don't apply @NotNull to ddl, e.g. storage references no storage but UsedItem does, although they inherit the same field.
spring.jpa.properties.hibernate.validator.apply_to_ddl=false

# for registering SQL functions in hibernate
spring.jpa.properties.hibernate.metadata_builder_contributor=com.avc.mis.beta.utilities.SqlFunctionsMetadataBuilderContributor

# defining validation groups
spring.jpa.properties.javax.persistence.validation.group.pre-update = com.avc.mis.beta.validation.groups.OnUpdate, javax.validation.groups.Default
spring.jpa.properties.javax.persistence.validation.group.pre-persist = com.avc.mis.beta.validation.groups.OnPersist, javax.validation.groups.Default


 # security
management.security.enabled = false
management.endpoints.web.exposure.include=*

 # convert dates to database according to UTC
#spring.jpa.properties.hibernate.jdbc.time_zone = UTC

 # insert in batches
#hibernate.jdbc.batch_size=20
#hibernate.order_inserts=true
#hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
#when using identity strategy can't batch inserts
# spring.jpa.properties.hibernate.order_inserts=true 
#commented because executing batch on single updates - which is the usual scenario
#spring.jpa.properties.hibernate.order_updates=true 
spring.jpa.properties.hibernate.batch_fetch_style=PADDED
spring.jpa.properties.hibernate.default_batch_fetch_size=25

 # Pretty-print JSON responses
spring.jackson.serialization.indent_output=true

 # showing sql logs
#--spring.jpa.show-sql=true
#--spring.jpa.properties.hibernate.show_sql=true
#--spring.jpa.properties.hibernate.format_sql=true
# logging.level.org.hibernate.jdbc=debug
#logging.level.org.hibernate.SQL=DEBUG
#--logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#spring.jpa.properties.hibernate.generate_statistics=true
#org.hibernate=DEBUG
logging.level.org.springframework.jdbc.core.JdbcTemplate=DEBUG
logging.level.org.springframework.jdbc.core.StatementCreatorUtils=TRACE


#org.hibernate.engine.jdbc.batch.internal.BatchingBatch=true



jwt.secret=sgmdps23890&#(!&(#jfsgnakg

spring.main.allow-bean-definition-overriding=true

#spring.jackson.default-property-inclusion=non_null

#avc.collections.batch-size=10
